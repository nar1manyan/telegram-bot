import { bot, owners } from '../constant/bot.state';
import { DBSettings } from '../model/db.settings.model';
import { RequestedUsersModel } from '../model/requested.users.model';
import { v4 as uuid } from 'uuid';
import { AdminModel } from '../model/admin.model';
import { Database } from '../database/init';
import { isAdmin } from './middlewares/isAdmin';

export const Bot_listeners = () => {
  bot.hears('/logout', async (ctx) => {
    await DBSettings.update(
      { value: false },
      {
        where: {
          for: ctx.update.message.from.id,
          name: 'logged',
        },
      },
    );

    ctx.replyWithMarkdown('üö™ *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!* üîí\n\n' +
      '‚ö†Ô∏è *–°–æ–≤–µ—Ç:* –û—á–∏—Å—Ç–∏—Ç–µ —á–∞—Ç –¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n' +
      '‚ù§Ô∏è *–° –ª—é–±–æ–≤—å—é,* n1endon <3',
      { parse_mode: 'Markdown' },
    );
  });

  bot.hears('/ask', async (ctx) => {
    const isAdm = await isAdmin(ctx.from.id);
    if (isAdm) return ctx.replyWithMarkdown('*‚ùå –ù–µ —Å—Ç—Ä–∞–¥–∞–π —Ö—É–π–Ω–µ–π, —Ç—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!!!!! ‚ùå*');

    const isAsked = await RequestedUsersModel.findOne({ where: { telegram_id: ctx.from.id } });

    if (isAsked) {
      return ctx.replyWithMarkdown('üì© *–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å!* ‚è≥\n\n' +
        '–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
        { parse_mode: 'Markdown' },
      );
    }

    await RequestedUsersModel.create({
      id: uuid(),
      telegram_id: ctx.from.id,
      full_name: ctx.from.first_name,
    });

    ctx.replyWithMarkdown('‚úÖ *–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!* üì®\n\n' +
      '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
      { parse_mode: 'Markdown' },
    );

    setTimeout(async () => {
      await bot.telegram.sendMessage(
        owners[0],
        'üö® *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø!* üö®\n\n' +
        '–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É üëâ `/requests`',
        { parse_mode: 'Markdown' },
      );
    }, 2000);
  });

  bot.hears('/requests', async (ctx) => {
    const isSuper = await AdminModel.findOne({ where: { telegram_id: ctx.from.id, isSuper: true } });

    if (!isSuper) {
      return ctx.replyWithMarkdown('‚õî *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!* ‚ùå\n\n' +
        '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.',
        { parse_mode: 'Markdown' },
      );
    }

    const requests = await RequestedUsersModel.findAll() as any;

    if (requests.length === 0) {
      return ctx.replyWithMarkdown('üì≠ *–ó–∞—è–≤–æ–∫ –Ω–µ—Ç!* ‚úÖ\n\n' +
        '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã.',
        { parse_mode: 'Markdown' },
      );
    }

    let text = 'üìã *–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç—É–ø:* üîë\n\n';

    for (const request of requests) {
      text += `üë§ *–ò–º—è:* ${request.full_name}\n` +
        `üÜî *Telegram ID:* \`${request.telegram_id}\`\n\n`;
    }

    ctx.replyWithMarkdown(text + 'üí° *–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É* üëâ `/accept`',
      { parse_mode: 'Markdown' },
    );
  });

  bot.hears('/admins', async (ctx) => {
    const admins = await AdminModel.findAll() as any;

    if (admins.length === 0) {
      return ctx.replyWithMarkdown('üö® *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!* ‚ùå', { parse_mode: 'Markdown' });
    }

    let text = 'üëë *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:* üî•\n\n';

    for (const admin of admins) {
      text += `üë§ *–ò–º—è:* ${admin.full_name}\n` +
        `üîπ *–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω:* ${admin.isSuper ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n` +
        `üÜî *Telegram ID:* \`${admin.telegram_id}\`\n\n`;
    }

    ctx.replyWithMarkdown(text + '‚öôÔ∏è *–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É* üëâ `/edit_admin`',
      { parse_mode: 'Markdown' },
    );
  });

  bot.hears('/connection', async (ctx) => {
    const databases = [
      { name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', db: Database },
      // { name: '–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚Ññ 1', db: null },
      // { name: '–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚Ññ 2', db: null },
    ];

    let report = 'üì° *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:*\n\n';
    const total = databases.length;
    let checked = 0;

    const progressMessage = await ctx.replyWithMarkdown('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö... 0%');

    for (const { name, db } of databases) {
      try {
        await db.authenticate();
        report += `‚úÖ *${name}* - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n`;
      } catch (error: any) {
        report += `‚ùå *${name}* - –æ—à–∏–±–∫–∞: ${error.message}\n`;
      }

      checked++;
      const progress = Math.round((checked / total) * 100);
      await ctx.telegram.editMessageText(ctx.chat.id, progressMessage.message_id, undefined, `üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö... ${progress}%`);
    }

    await ctx.telegram.editMessageText(ctx.chat.id, progressMessage.message_id, undefined, '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    setTimeout(async () => await ctx.replyWithMarkdown(report), 1000);
  });
};
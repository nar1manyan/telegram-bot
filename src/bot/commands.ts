import { bot, INACTIVITY_TIME, owners } from '../constant/bot.state';
import { isAdmin } from './middlewares/isAdmin';
import { AdminModel } from '../model/admin.model';
import Bcrypt from 'bcrypt';
import { DBSettings } from '../model/db.settings.model';
import { RequestedUsersModel } from '../model/requested.users.model';
import { v4 as uuid } from 'uuid';

export const Bot_Commands = () => {
  const userActivity: Map<number, NodeJS.Timeout> = new Map();

  function resetInactivityTimer(userId: number, ctx: any) {
    if (userActivity.has(userId)) {
      clearTimeout(userActivity.get(userId)!);
    }

    const timeout = setTimeout(async () => {
      ctx.reply('–ò–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤ 30 –º–∏–Ω—É—Ç, –≤—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å!');
      await DBSettings.update(
        {
          value: false,
        },
        {
          where: {
            for: ctx.update.message.from.id,
            name: 'logged',
          },
        });
      userActivity.delete(userId);
    }, INACTIVITY_TIME);

    userActivity.set(userId, timeout);
  }

  bot.use(async (ctx: any, next) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    resetInactivityTimer(userId, ctx);

    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin && ctx.message?.text !== '/start' && ctx.message?.text !== '/ask') return;

    if (isUserAdmin && !ctx.message?.text.includes('/password') && ctx.message?.text !== '/ask') {
      const settings = await DBSettings.findOne({
        where: {
          for: ctx.update.message.from.id,
          name: 'logged',
        },
      }) as any;
      if (!settings.value) return ctx.reply('–ù–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ—Ñ–æ—Ä–º–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω!\n\n–ó–∞–ª–æ–≥–∏–Ω—Å—è —Å—É—á–∫–∞!');
    }

    return next();
  });


  bot.start(async (ctx) => {
    console.log(ctx.from.id);
    if (await isAdmin(ctx.update.message.from.id)) {
      ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.update.message.from.first_name} ${ctx.update.message.from.last_name}.\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å\n\n –ü—Ä–∏–º–µ—Ä: /password –ø–∞—Ä–æ–ª—å`);
    } else ctx.reply('–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –ë–æ—Ç.\n–î–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É –≤—ã–¥–∞–µ—Ç—Å—è –≤ —Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞—Ç–µ–ª—è @n1endon.\n–ë–æ—Ç –≤–ø—Ä–µ–¥—å –Ω–µ –±—É–¥–µ—Ç –≤–∞–º –æ—Ç–≤–µ—á–∞—Ç—å, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø.\n–£–¥–∞—á–∏ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!');
  });

  bot.command('password', async (ctx) => {
    const admin = await AdminModel.findOne({ where: { telegram_id: ctx.update.message.from.id } }) as any;
    const settings = await DBSettings.findOne({
      where: {
        for: ctx.update.message.from.id,
        name: 'logged',
      },
    }) as any;
    if (settings.value) {
      await ctx.deleteMessage(ctx.update.message.message_id);
      return ctx.reply('–í—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ!');
    }
    const args = ctx.message.text.split(' ').slice(1);

    if (args.length === 0)
      return ctx.reply('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–∞—Ä–æ–ª—å.\n –ü—Ä–∏–º–µ—Ä: /password 123');

    const password = args.join(' ');

    if (!await Bcrypt.compare(password, admin?.password)) {
      await ctx.deleteMessage(ctx.update.message.message_id);
      return ctx.reply('–î–æ—Å—Ç—É–ø –ó–∞–ø—Ä–µ—â–µ–Ω  üö´');
    }
    settings.update({ value: true });
    await ctx.deleteMessage(ctx.update.message.message_id);
    ctx.reply('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! ‚úÖ');
  });

  bot.help(async (ctx) => {
    const admin = await AdminModel.findOne({ where: { telegram_id: ctx.from.id } }) as any;
    const help_commands = '–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n/admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n/get - –ü–æ–∏—Å–∫ —á–µ–ª–æ–≤–µ–∫–∞\n/delete - –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞\n/update - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ\n/con_test - –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö\n/change_pass - –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è';
    if (!admin.isSuper) ctx.reply(help_commands);
    else ctx.reply(help_commands + '\n\n–î–æ—Å—Ç—É–ø–∞ –≤—ã—Å—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:\n\n/add_admin - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/del_admin - –£–¥–∞–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/logout {id} - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n/fuck {id} - –ü–æ—à—É—Ç–∏—Ç—å –Ω–∞–¥ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
  });

  bot.hears('/logout', async (ctx) => {
    await DBSettings.update(
      {
        value: false,
      },
      {
        where: {
          for: ctx.update.message.from.id,
          name: 'logged',
        },
      });
    ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã! –ê—Ä–∏–≤–∏–¥–µ—Ä—á–∏\n\n–ü—Ä–æ—Å—å–±–∞ –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n–° –ª—é–±–æ–≤—å—é n1endon <3');
  });

  bot.command('change_pass', async (ctx) => {
    const admin = await AdminModel.findOne({ where: { telegram_id: ctx.from.id } }) as any;
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length === 0)
      return ctx.reply('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–∞—Ä–æ–ª—å.\n –ü—Ä–∏–º–µ—Ä: /change_pass 123');
    const password = args.join(' ');
    admin.password = await Bcrypt.hash(password, 10);
    await ctx.deleteMessage(ctx.update.message.message_id);
    await admin.save();
    ctx.reply('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω!');
  });

  bot.hears('/ask', async (ctx) => {
    const isAsked = await RequestedUsersModel.findOne({ where: { telegram_id: ctx.from.id } });
    if (isAsked) return ctx.reply('–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    await RequestedUsersModel.create({
      id: uuid(),
      telegram_id: ctx.from.id,
      full_name: ctx.from.first_name,
    });
    ctx.reply('–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –∏—Ö –æ—Ç–≤–µ—Ç–∞');
    setTimeout(async () => {
      await bot.telegram.sendMessage(owners[0], '–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞.\n\n –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /requests');
    }, 2000);
  });

  bot.hears('/requests', async (ctx) => {
    const isSuper = await AdminModel.findOne({ where: { telegram_id: ctx.from.id, isSuper: true } });
    if (!isSuper) return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ—à–µ–ª –Ω–∞—Ö–µ—Ä');
    let text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É:\n\n';
    const requests = await RequestedUsersModel.findAll() as any;
    for (const request of requests) {
      if (request)
        text += `–ò–º—è - ${request.full_name}\n–¢–µ–ª–µ–≥—Ä–∞–º ID - ${request.telegram_id}\n\n`;
    }
    ctx.reply(text + '\n\n–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /accept');
  });

  bot.command('accept', async (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length === 0) return ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n\n–ü—Ä–∏–º–µ—Ä: /accept telegram_id 0');
    const requester = await RequestedUsersModel.findOne({ where: { telegram_id: args[0] } }) as any;
    if (!requester) return ctx.reply('Invalid Telegram ID');
    await AdminModel.create({
      id: uuid(),
      telegram_id: args[0],
      password: '$2b$10$jZuPOcrjVrLD153bGBky6Opo03aDA7Gk1oE./AgAdU36jP4QhS97i',
      full_name: requester.full_name,
      isSuper: args[1] || 0,
    });
    await DBSettings.create({
      id: uuid(),
      name: 'logged',
      value: false,
      for: args[0],
    });
    await requester.destroy();
    ctx.reply('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!');
    setTimeout(async () => {
      await bot.telegram.sendMessage(args[0], '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –¥–æ—Å—Ç—É–ø.\n–ë–æ—Ç –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º, –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–º–µ–Ω—è–π –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–≤–æ–π (–°—Ç–∞—Ä—ã–π 123123)\n—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /change_pass');
    }, 2000);
  });
};
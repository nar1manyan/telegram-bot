import { bot, INACTIVITY_TIME, owners } from '../constant/bot.state';
import { isAdmin } from './middlewares/isAdmin';
import { AdminModel } from '../model/admin.model';
import { DBSettings } from '../model/db.settings.model';
import { RequestedUsersModel } from '../model/requested.users.model';
import { v4 as uuid } from 'uuid';
import { Markup } from 'telegraf';
import Bcrypt from 'bcrypt';

export const Bot_Commands = () => {
  const userActivity: Map<number, NodeJS.Timeout> = new Map();

  function resetInactivityTimer(userId: number, ctx: any) {
    if (userActivity.has(userId)) {
      clearTimeout(userActivity.get(userId)!);
    }

    const timeout = setTimeout(async () => {
      ctx.replyWithMarkdown(
        `‚è≥ *–ò–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤ 30 –º–∏–Ω—É—Ç, –≤—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.*\n\n` +
        `üîê *–ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å!*`,
      );

      await DBSettings.update(
        { value: false },
        { where: { for: ctx.update.message.from.id, name: 'logged' } },
      );

      userActivity.delete(userId);
    }, INACTIVITY_TIME);

    userActivity.set(userId, timeout);
  }

  bot.use(async (ctx: any, next) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    resetInactivityTimer(userId, ctx);

    const isUserAdmin = await isAdmin(userId);

    if (!isUserAdmin && ctx.message?.text !== '/start' && ctx.message?.text !== '/ask' && ctx.message?.text !== '/about') return;

    if (isUserAdmin && !ctx.message?.text.includes('/password') && ctx.message?.text !== '/ask') {
      const settings = await DBSettings.findOne({
        where: { for: ctx.from.id, name: 'logged' },
      }) as any;

      if (!settings.value) return ctx.replyWithMarkdown('üö® *–ù–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ—Ñ–æ—Ä–º–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω!*\n\nüîë *–ó–∞–ª–æ–≥–∏–Ω—Å—è, —Å—É—á–∫–∞!*');
    }

    return next();
  });

  bot.command('password', async (ctx) => {
    const admin = await AdminModel.findOne({ where: { telegram_id: ctx.update.message.from.id } }) as any;
    const settings = await DBSettings.findOne({ where: { for: ctx.update.message.from.id, name: 'logged' } }) as any;

    if (settings.value) {
      await ctx.deleteMessage(ctx.update.message.message_id);
      return ctx.replyWithMarkdown('‚úÖ *–í—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ!*');
    }

    const args = ctx.message.text.split(' ').slice(1);
    if (args.length === 0) return ctx.replyWithMarkdown('‚ö†Ô∏è *–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–∞—Ä–æ–ª—å.*\n\n–ü—Ä–∏–º–µ—Ä: `/password 123`');

    const password = args.join(' ');

    if (!await Bcrypt.compare(password, admin?.password)) {
      await ctx.deleteMessage(ctx.update.message.message_id);
      return ctx.replyWithMarkdown('üö´ *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*');
    }

    settings.update({ value: true });
    await ctx.deleteMessage(ctx.update.message.message_id);
    ctx.replyWithMarkdown('üîì *–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!* ‚úÖ');
  });

  bot.command('change_pass', async (ctx) => {
    const admin = await AdminModel.findOne({ where: { telegram_id: ctx.from.id } }) as any;
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length === 0) return ctx.replyWithMarkdown('‚ö†Ô∏è *–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.*\n\n–ü—Ä–∏–º–µ—Ä: `/change_pass 123`');

    admin.password = await Bcrypt.hash(args.join(' '), 10);
    await ctx.deleteMessage(ctx.update.message.message_id);
    await admin.save();
    ctx.replyWithMarkdown('üîë *–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!* ‚úÖ');
  });

  bot.command('accept', async (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    if (args.length < 2) return ctx.replyWithMarkdown('‚ö†Ô∏è *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.*\n\n–ü—Ä–∏–º–µ—Ä: `/accept telegram_id 0`');

    const requester = await RequestedUsersModel.findOne({ where: { telegram_id: args[0] } }) as any;
    if (!requester) return ctx.replyWithMarkdown('üö´ *–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID!*');

    await AdminModel.create({
      id: uuid(),
      telegram_id: args[0],
      password: '$2b$10$jZuPOcrjVrLD153bGBky6Opo03aDA7Gk1oE./AgAdU36jP4QhS97i',
      full_name: requester.full_name,
      isSuper: args[1] || 0,
    });

    await DBSettings.create({
      id: uuid(),
      name: 'logged',
      value: false,
      for: args[0],
    });

    await requester.destroy();
    ctx.replyWithMarkdown('üéâ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!* ‚úÖ');

    setTimeout(async () => {
      await bot.telegram.sendMessage(
        args[0],
        'üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –¥–æ—Å—Ç—É–ø!*\n\n' +
        'üîë *–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å!* (–°—Ç–∞—Ä—ã–π: `123123`)\n\n' +
        'üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/change_pass –≤–∞—à_–ø–∞—Ä–æ–ª—å`',
        { parse_mode: 'Markdown' });
    }, 2000);
  });

  bot.command('remote_logout', async (ctx) => {
    const isSuper = await AdminModel.findOne({ where: { telegram_id: ctx.from.id, isSuper: true } });
    if (!isSuper) return ctx.replyWithMarkdown('üö´ *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*');

    const args = ctx.message.text.split(' ').slice(1);
    if (!args.length) return ctx.replyWithMarkdown('‚ö†Ô∏è *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram ID.*\n\n–ü—Ä–∏–º–µ—Ä: `/remote_logout telegram_id`');

    const settings = await DBSettings.findOne({ where: { for: args[0], name: 'logged', value: true } }) as any;
    if (!settings) return ctx.replyWithMarkdown('üîç *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.*');

    settings.value = false;
    await settings.save();

    ctx.replyWithMarkdown('‚úÖ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã!*');
    await bot.telegram.sendMessage(
      args[0],
      'üö® *–í—ã –±—ã–ª–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–µ–∑ –≤–∞—à–µ–≥–æ –≤–µ–¥–æ–º–∞.*\n\n' +
      'üò° *–ï—Å–ª–∏ –≤—ã —Å —ç—Ç–∏–º –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã ‚Äî –Ω–∞–±–µ–π—Ç–µ –µ–º—É –µ–±–∞–ª–æ.*',
      { parse_mode: 'Markdown' });
  });

  bot.command('destroy', async (ctx) => {
    const isSuper = await AdminModel.findOne({ where: { telegram_id: ctx.from.id, isSuper: true } });
    if (!isSuper) return ctx.replyWithMarkdown('üö´ *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*');

    const args = ctx.message.text.split(' ').slice(1);
    if (!args.length) return ctx.replyWithMarkdown('‚ö†Ô∏è *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram ID.*\n\n–ü—Ä–∏–º–µ—Ä: `/destroy telegram_id`');

    const del_admin = await AdminModel.findOne({ where: { telegram_id: args[0] } }) as any;
    if (!del_admin || del_admin.isSuper) {
      return ctx.replyWithMarkdown('üö´ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞!*');
    }

    await del_admin.destroy();
    await DBSettings.destroy({ where: { for: args[0] } });

    await ctx.replyWithMarkdown('üõë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!*');
    await bot.telegram.sendMessage(
      args[0],
      'üìú *–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –®–∫–æ–ª—ã –ß–∞—Ä–æ–¥–µ–π—Å—Ç–≤–∞ –∏ –í–æ–ª—à–µ–±—Å—Ç–≤–∞ ¬´–•–æ–≥–≤–∞—Ä—Ç—Å¬ª!*\n\n' +
      'üö∑ *–¢–µ–ø–µ—Ä—å –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.*\n\n' +
      'üîé *–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.*',
      { parse_mode: 'Markdown' });
  });

  bot.command('fuck', async (ctx) => {
    const isSuper = await AdminModel.findOne({ where: { telegram_id: ctx.from.id, isSuper: true } });
    if (!isSuper) return ctx.replyWithMarkdown('üö´ *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*');
    const args = ctx.message.text.split(' ').slice(1);
    if (!args.length) return ctx.replyWithMarkdown('‚ö†Ô∏è *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram ID.*\n\n–ü—Ä–∏–º–µ—Ä: `/destroy telegram_id`');
    if (args[0] === owners[0].toString()) return ctx.replyWithMarkdown('‚ö†Ô∏è *–ù–∞–¥ —Å–æ–±–æ–π –ø–æ—à—É—Ç–∏ –¥–∞–ª–±–∞–µ–±*\n\n`#–ù–µ—Ö—É–π–í–∞–≥–µ–¢—Ä–æ–≥–∞—Ç—å`');
    const targetId = args[0];
    if (!targetId) return ctx.replyWithMarkdown('‚ö†Ô∏è *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram ID.*\n\n–ü—Ä–∏–º–µ—Ä: `/fuck telegram_id`');
    await ctx.reply(
      'üåü *–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —à—É—Ç–æ–∫:* üåü\n\n–ö–∞–∂–¥–∞—è —à—É—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞, –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–º–µ—à–Ω–æ! üí°\n_–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—à—É—Ç–∏—Ç—å –Ω–∞–¥ –¥–∞–ª–±–∞–µ–±–æ–º._',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üî• –û—Ç–ø—Ä–∞–≤–∏—Ç—å —à—É—Ç–æ—á–Ω–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ', callback_data: `fuck_button_1:${targetId}` },
              { text: 'üí• –°–ø–∞–º –∏ –∑–∞–µ–±–∫–∞', callback_data: `fuck_button_2:${targetId}` },
              { text: '‚ö°Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–º–µ—à–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: `fuck_button_3:${targetId}` },
            ],
          ],
        },
      },
    );
  });
};